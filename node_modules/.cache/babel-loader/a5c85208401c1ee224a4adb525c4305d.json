{"ast":null,"code":"import _slicedToArray from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/src/containers/MainContent.js\";\nimport React, { Component } from 'react';\nimport { Container, Button, Alert, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Header from '../components/Header';\nimport MessageContainer from '../containers/MessageContainer';\nimport FriendsList from '../containers/FriendsList';\nimport UpdateUserForm from '../components/UpdateUserForm';\nimport apiKey from '../secrets.js';\n\nvar MainContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainContent, _Component);\n\n  //does state need to live here as well??\n  function MainContent() {\n    var _this;\n\n    _classCallCheck(this, MainContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainContent).call(this));\n\n    _this.translationHandler = function (e) {\n      // refactor this method to only update the translation text\n      // update state to include typed text for translationText\n      var input = e.target.value;\n\n      _this.setState({\n        translationText: input\n      });\n    };\n\n    _this.getLangDirection = function () {\n      var state = _this.state;\n      console.log(state); // get native and desired languages and store in a variable\n\n      var native = _this.state.currentUser.native_language;\n      var desired = _this.state.currentUser.desired_language;\n      var start;\n      var finish;\n      var result;\n\n      switch (native) {\n        // case native === 'English':\n        //   start = 'en'\n        //   break;\n        case 'Spanish':\n          start = 'es';\n          break;\n\n        case 'French':\n          start = 'fr';\n          break;\n\n        case 'Portuguese':\n          start = 'pt';\n          break;\n\n        case 'Italian':\n          start = 'it';\n          break;\n\n        case 'German':\n          start = 'de';\n          break;\n\n        default:\n          start = 'en';\n      }\n\n      switch (desired) {\n        case 'Spanish':\n          finish = 'es';\n          break;\n\n        case 'French':\n          finish = 'fr';\n          break;\n\n        case 'Portuguese':\n          finish = 'pt';\n          break;\n\n        case 'Italian':\n          debugger;\n          finish = 'it';\n          debugger;\n          break;\n\n        case 'German':\n          finish = 'de';\n          break;\n\n        default:\n          finish = \"en\";\n      }\n\n      result = \"\".concat(start, \"-\").concat(finish);\n      debugger;\n      return result;\n    };\n\n    _this.queryTranslateApi = function () {\n      // console.log('queryTranslateApi invoked!');\n      console.log(_this.getLangDirection());\n      var url = \"https://translate.yandex.net/api/v1.5/tr.json/translate\";\n      var text = _this.state.translationText;\n\n      var lang = _this.getLangDirection(); // // NEEDS TO BE MORE DYNAMIC TO ACCOMODATE MULTIPLE LANGUAGES\n      // if (this.state.currentUser.desired_language === \"English\"){\n      //   lang = `en-es`\n      // } else {\n      //   lang = `es-en`\n      // }\n\n\n      debugger;\n      var format = \"plain\";\n      fetch(\"\".concat(url, \"?key=\").concat(apiKey, \"&text=\").concat(text, \"&lang=\").concat(lang)).then(function (resp) {\n        return resp.json();\n      }).then(function (transText) {\n        console.log(transText);\n        debugger;\n\n        _this.setState({\n          translationText: transText.text[0]\n        });\n      });\n    };\n\n    _this.friendClickHandler = function (userObj) {\n      console.log(userObj);\n      console.log(\"friendClickHandler invoked!\"); // debugger\n      // get master messages for reset\n\n      var masterMessages = _this.state.masterMessages; // update messages with mssgs from current user and clicked person\n\n      var currentUser = _this.state.currentUser.id;\n      var msgsCopy = _this.state.messages;\n      var recipient = userObj; // filter messages for sender receiver combo\n\n      var filteredMsgs = masterMessages.filter(function (msg) {\n        return msg.sender_id === currentUser && msg.receiver_id === recipient.id;\n      }); // debugger\n\n      _this.setState({\n        messages: filteredMsgs,\n        selectedUser: userObj\n      }); // return filteredMsgs\n\n    };\n\n    _this.deleteMessage = function (e) {\n      console.log(\"deleteMessage Invoked\", e); // debugger\n    };\n\n    _this.messageHandler = function (e) {\n      console.log(e); // debugger\n\n      console.log(\"messageHandler invoked\");\n\n      _this.setState({\n        currentMessage: e.target.value\n      }); // way to access message text\n      // let message = event.target.parentElement.parentElement.children[0].value\n\n    };\n\n    _this.langToggler = function () {\n      var fluentLang = _this.state.currentUser.native_Language; // displayed text should be toggled based upon native_Language\n      // consider changing the backend structure of lang to match expectations of\n    };\n\n    _this.messageSender = function () {\n      console.log(\"messageSender Invoked!\");\n      var selectedUser = _this.state.selectedUser;\n\n      if (selectedUser.id) {\n        var recipient = _this.state.selectedUser.id;\n        var message = _this.state.currentMessage;\n        var sender = _this.state.currentUser.id;\n        var data = {\n          receiver_id: recipient,\n          seen: false,\n          sender_id: sender,\n          text_body: message\n        };\n        fetch('http://localhost:3000/users/1/messages', {\n          method: 'POST',\n          body: JSON.stringify(data),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(function (res) {\n          return res.json();\n        }).then(function (response) {\n          console.log('Success');\n\n          var copyOfMsgs = _toConsumableArray(_this.state.messages);\n\n          copyOfMsgs.push(response);\n\n          _this.setState({\n            messages: copyOfMsgs\n          });\n        }).catch(function (error) {\n          return console.error('Error', error);\n        }); // erase current message after sending\n\n        _this.setState({\n          currentMessage: \"\"\n        });\n      } else {\n        alert(\"Please select a recipient!\");\n      } // capture current message & sender from state\n\n    };\n\n    _this.wordSaver = function () {\n      debugger;\n    };\n\n    _this.toggleModal = function () {\n      console.log(\"toggleModal Invoked!\"); // get current state of modalShown\n\n      var modal = _this.state.modalShown;\n      modal = !modal;\n\n      _this.setState({\n        modalShown: modal\n      });\n\n      debugger;\n    };\n\n    _this.cancelModal = function () {};\n\n    _this.updateUser = function (e) {\n      console.log(\"updateUser invoked!\"); //this method should perform a PUT fetch to the backend\n      // Get Current User id\n\n      var userId = _this.state.currentUser.id; // Get all form values from this.state\n\n      var first = _this.state.inputFirstName;\n      var last = _this.state.inputLastName;\n      var native = _this.state.inputNative;\n      var desired = _this.state.inputDesired;\n      var data = {\n        desired_language: desired,\n        first_name: first,\n        last_name: last,\n        native_language: native\n      };\n      debugger;\n      fetch(\"http://localhost:3000/users/\".concat(userId), {\n        method: 'PATCH',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (newUserInfo) {\n        console.log('Success:', JSON.stringify(newUserInfo));\n\n        _this.setState({\n          currentUser: newUserInfo\n        });\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n\n      _this.toggleModal();\n    };\n\n    _this.formOnChange = function (e, stateKey) {\n      console.log(\"formChange invoked!\");\n      var text = e.currentTarget.value; // debugger\n\n      _this.setState(_defineProperty({}, stateKey, text));\n    };\n\n    _this.state = {\n      currentUser: {},\n      masterMessages: [],\n      messages: [],\n      currentMessage: \"\",\n      selectedUser: {},\n      allUsers: [],\n      translationText: \"\",\n      inputFirstName: \"\",\n      inputLastName: \"\",\n      inputNative: \"\",\n      inputDesired: \"\",\n      modalShown: false,\n      currentConversation: {}\n    };\n    return _this;\n  }\n\n  _createClass(MainContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Promise.all allows multiple fetches to be done simultaneously, see below link\n      // https://medium.com/@ahnahn.un/a-brief-intro-to-promise-all-92291d93780c\n      Promise.all([fetch('http://localhost:3000/users/1'), fetch('http://localhost:3000/users/1/messages'), fetch('http://localhost:3000/users')]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            res1 = _ref2[0],\n            res2 = _ref2[1],\n            res3 = _ref2[2];\n\n        return Promise.all([res1.json(), res2.json(), res3.json()]);\n      }).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 3),\n            userInfo = _ref4[0],\n            messages = _ref4[1],\n            allUsers = _ref4[2];\n\n        console.log(userInfo);\n        console.log(messages);\n        console.log(allUsers);\n        return _this2.setState({\n          currentUser: userInfo,\n          messages: messages,\n          masterMessages: messages,\n          allUsers: allUsers\n        });\n      });\n    } //  ? key=<API key>\n    // & text=<text to translate>\n    // & lang=<translation direction>\n    // & [format=<text format>]\n    // & [options=<translation options>]\n    // & [callback=<name of the callback function>]\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"mainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, React.createElement(Header, {\n        className: \"header\",\n        currentUser: this.state.currentUser,\n        updateUser: this.updateUser,\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"subContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(FriendsList, {\n        allUsers: this.state.allUsers,\n        friendClickHandler: this.friendClickHandler,\n        currentUser: this.state.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }), React.createElement(Modal, {\n        isOpen: this.state.modalShown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: function toggle() {\n          return _this3.toggleModal();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, \"Edit User\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(UpdateUserForm, {\n        formOnChange: this.formOnChange,\n        inputFirstName: this.state.inputFirstName,\n        inputLastName: this.state.inputLastName,\n        inputNative: this.state.inputNative,\n        inputDesired: this.state.inputDesired,\n        updateUser: this.updateUser,\n        toggleModal: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }))), React.createElement(MessageContainer, {\n        translationHandler: this.translationHandler,\n        translationText: this.state.translationText,\n        selectedUser: this.state.selectedUser,\n        deleteMessage: this.deleteMessage,\n        messageHandler: this.messageHandler,\n        messages: this.state.messages,\n        filteredMsgs: null,\n        currentMessage: this.state.currentMessage,\n        messageSender: this.messageSender,\n        currentUser: this.state.currentUser,\n        queryTranslateApi: this.queryTranslateApi,\n        sourceLang: this.state.currentUser.native_language,\n        desiredLang: this.state.currentUser.desired_language,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MainContent;\n}(Component);\n\nexport default MainContent;","map":{"version":3,"sources":["/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/src/containers/MainContent.js"],"names":["React","Component","Container","Button","Alert","Modal","ModalHeader","ModalBody","ModalFooter","Header","MessageContainer","FriendsList","UpdateUserForm","apiKey","MainContent","translationHandler","e","input","target","value","setState","translationText","getLangDirection","state","console","log","native","currentUser","native_language","desired","desired_language","start","finish","result","queryTranslateApi","url","text","lang","format","fetch","then","resp","json","transText","friendClickHandler","userObj","masterMessages","id","msgsCopy","messages","recipient","filteredMsgs","filter","msg","sender_id","receiver_id","selectedUser","deleteMessage","messageHandler","currentMessage","langToggler","fluentLang","native_Language","messageSender","message","sender","data","seen","text_body","method","body","JSON","stringify","headers","res","response","copyOfMsgs","push","catch","error","alert","wordSaver","toggleModal","modal","modalShown","cancelModal","updateUser","userId","first","inputFirstName","last","inputLastName","inputNative","inputDesired","first_name","last_name","newUserInfo","formOnChange","stateKey","currentTarget","allUsers","currentConversation","Promise","all","res1","res2","res3","userInfo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Button, Alert, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Header from '../components/Header'\nimport MessageContainer from '../containers/MessageContainer'\nimport FriendsList from '../containers/FriendsList'\nimport UpdateUserForm from '../components/UpdateUserForm'\nimport apiKey from '../secrets.js'\n\nclass MainContent extends Component {\n  //does state need to live here as well??\n  constructor(){\n    super()\n\n    this.state = {\n      currentUser: {},\n      masterMessages: [],\n      messages: [],\n      currentMessage: \"\",\n      selectedUser: {},\n      allUsers: [],\n      translationText: \"\",\n      inputFirstName: \"\",\n      inputLastName: \"\",\n      inputNative: \"\",\n      inputDesired: \"\",\n      modalShown: false,\n      currentConversation: {}\n    }\n  }\n\n  componentDidMount(){\n    // Promise.all allows multiple fetches to be done simultaneously, see below link\n    // https://medium.com/@ahnahn.un/a-brief-intro-to-promise-all-92291d93780c\n    Promise.all([\n      fetch('http://localhost:3000/users/1'),\n      fetch('http://localhost:3000/users/1/messages'),\n      fetch('http://localhost:3000/users')\n\n    ])\n    .then(([res1, res2, res3]) => Promise.all([res1.json(), res2.json(), res3.json()]))\n    .then(([userInfo, messages, allUsers])=>{\n      console.log(userInfo);\n      console.log(messages);\n      console.log(allUsers);\n\n      return this.setState({\n        currentUser: userInfo,\n        messages: messages,\n        masterMessages: messages,\n        allUsers: allUsers,\n      })\n    })\n  }\n\n\n\n //  ? key=<API key>\n // & text=<text to translate>\n // & lang=<translation direction>\n // & [format=<text format>]\n // & [options=<translation options>]\n // & [callback=<name of the callback function>]\n\n  translationHandler = (e)=> {\n    // refactor this method to only update the translation text\n    // update state to include typed text for translationText\n\n    let input = e.target.value\n\n    this.setState({translationText: input})\n  }\n\n  getLangDirection =()=> {\n\n    let state = this.state\n    console.log(state);\n    // get native and desired languages and store in a variable\n    let native = this.state.currentUser.native_language\n    let desired = this.state.currentUser.desired_language\n    let start;\n    let finish;\n    let result;\n\n    switch (native) {\n      // case native === 'English':\n      //   start = 'en'\n      //   break;\n      case 'Spanish':\n        start = 'es'\n        break;\n      case 'French':\n        start = 'fr'\n        break;\n      case 'Portuguese':\n        start = 'pt'\n        break;\n      case 'Italian':\n        start = 'it'\n        break;\n      case 'German':\n        start = 'de'\n        break;\n      default:\n        start = 'en'\n    }\n\n    switch (desired) {\n      case 'Spanish':\n        finish = 'es'\n        break;\n      case 'French':\n        finish = 'fr'\n        break;\n      case 'Portuguese':\n        finish = 'pt'\n        break;\n      case 'Italian':\n      debugger\n        finish = 'it'\n      debugger\n        break;\n      case 'German':\n        finish = 'de'\n        break;\n      default:\n        finish = \"en\"\n    }\n\n  result = `${start}-${finish}`\n  debugger\n    return result\n  }\n\n  queryTranslateApi = ()=>{\n    // console.log('queryTranslateApi invoked!');\n    console.log(this.getLangDirection());\n    const url = `https://translate.yandex.net/api/v1.5/tr.json/translate`\n\n    let text = this.state.translationText\n\n    let lang = this.getLangDirection()\n\n    // // NEEDS TO BE MORE DYNAMIC TO ACCOMODATE MULTIPLE LANGUAGES\n    // if (this.state.currentUser.desired_language === \"English\"){\n    //   lang = `en-es`\n    // } else {\n    //   lang = `es-en`\n    // }\n\n    debugger\n    let format = `plain`\n\n    fetch(`${url}?key=${apiKey}&text=${text}&lang=${lang}`)\n    .then(resp=>{\n      return resp.json()\n    })\n    .then((transText)=>{\n      console.log(transText)\n      debugger\n      this.setState({translationText: transText.text[0]})\n    })\n  }\n\n\n  friendClickHandler = (userObj) =>{\n    console.log(userObj);\n    console.log(\"friendClickHandler invoked!\");\n\n    // debugger\n    // get master messages for reset\n    let masterMessages = this.state.masterMessages\n\n    // update messages with mssgs from current user and clicked person\n    let currentUser = this.state.currentUser.id\n    let msgsCopy = this.state.messages\n    let recipient = userObj\n\n    // filter messages for sender receiver combo\n\n    let filteredMsgs = masterMessages.filter((msg)=> {\n        return msg.sender_id === currentUser && msg.receiver_id === recipient.id\n    })\n\n    // debugger\n\n    this.setState({\n      messages: filteredMsgs,\n      selectedUser: userObj\n    })\n\n    // return filteredMsgs\n  }\n\n  deleteMessage = (e) => {\n    console.log(\"deleteMessage Invoked\", e);\n    // debugger\n  }\n\n//handles the composition of a message\n  messageHandler = (e) => {\n    console.log(e);\n    // debugger\n    console.log(\"messageHandler invoked\");\n\n    this.setState({currentMessage: e.target.value})\n\n    // way to access message text\n    // let message = event.target.parentElement.parentElement.children[0].value\n  }\n\n  langToggler = ()=> {\n    let fluentLang = this.state.currentUser.native_Language\n\n    // displayed text should be toggled based upon native_Language\n    // consider changing the backend structure of lang to match expectations of\n  }\n\n//handles the sending of a message to a recipient\n  messageSender = () =>{\n    console.log(\"messageSender Invoked!\");\n\n    let selectedUser = this.state.selectedUser\n\n    if (selectedUser.id){\n      let recipient = this.state.selectedUser.id\n      let message = this.state.currentMessage\n      let sender = this.state.currentUser.id\n      let data = {receiver_id: recipient, seen: false, sender_id: sender, text_body: message}\n\n      fetch('http://localhost:3000/users/1/messages', {\n        method:'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res=>res.json())\n      .then(response => {\n        console.log('Success')\n        let copyOfMsgs = [...this.state.messages]\n        copyOfMsgs.push(response)\n\n        this.setState({messages: copyOfMsgs})\n      })\n      .catch(error => console.error('Error', error));\n\n      // erase current message after sending\n      this.setState({currentMessage: \"\"})\n\n    } else {\n      alert(\"Please select a recipient!\")\n\n    }\n\n    // capture current message & sender from state\n\n  }\n\n  wordSaver = ()=>{\n    debugger\n  }\n\n  toggleModal = ()=>{\n    console.log(\"toggleModal Invoked!\");\n    // get current state of modalShown\n    let modal = this.state.modalShown\n    modal = !(modal)\n\n    this.setState({modalShown: modal})\n    debugger\n  }\n\n  cancelModal = ()=>{\n\n  }\n\n  updateUser = (e)=>{\n    console.log(\"updateUser invoked!\");\n      //this method should perform a PUT fetch to the backend\n    // Get Current User id\n    let userId = this.state.currentUser.id\n    // Get all form values from this.state\n    let first = this.state.inputFirstName\n    let last = this.state.inputLastName\n    let native = this.state.inputNative\n    let desired =this.state.inputDesired\n\n    let data = {\n      desired_language: desired,\n      first_name: first,\n      last_name: last,\n      native_language: native}\n\n    debugger\n\n    fetch(`http://localhost:3000/users/${userId}`,{\n      method: 'PATCH',\n      body: JSON.stringify(data),\n      headers:{\n\n      'Content-Type': 'application/json'\n    }\n  }).then(res=> res.json())\n  .then(newUserInfo => {\n    console.log('Success:', JSON.stringify(newUserInfo));\n    this.setState({currentUser: newUserInfo})\n  })\n  .catch(error => console.error('Error:', error));\n\n  this.toggleModal()\n\n  }\n\n  formOnChange =(e, stateKey) =>{\n    console.log(\"formChange invoked!\");\n    let text = e.currentTarget.value\n    // debugger\n\n    this.setState({[stateKey]: text})\n\n\n  }\n\n\n\n  render(){\n    return(\n      <div className=\"mainContent\" >\n        <Header className=\"header\"\n          currentUser={this.state.currentUser}\n          updateUser={this.updateUser}\n          toggleModal={this.toggleModal}\n        />\n      <div className=\"subContent\">\n        <FriendsList\n          allUsers={this.state.allUsers}\n          friendClickHandler={this.friendClickHandler}\n          currentUser={this.state.currentUser}\n        />\n\n      <Modal isOpen={this.state.modalShown}>\n        <ModalHeader toggle={()=>this.toggleModal()}>Edit User</ModalHeader>\n        <ModalBody>\n          <UpdateUserForm\n            formOnChange={this.formOnChange}\n            inputFirstName={this.state.inputFirstName}\n            inputLastName={this.state.inputLastName}\n            inputNative={this.state.inputNative}\n            inputDesired={this.state.inputDesired}\n            updateUser={this.updateUser}\n            toggleModal={this.toggleModal}\n          />\n        </ModalBody>\n\n      </Modal>\n\n        <MessageContainer\n          translationHandler={this.translationHandler}\n          translationText={this.state.translationText}\n          selectedUser={this.state.selectedUser}\n          deleteMessage={this.deleteMessage}\n          messageHandler={this.messageHandler}\n          messages={this.state.messages}\n          filteredMsgs={null}\n          currentMessage={this.state.currentMessage}\n          messageSender={this.messageSender}\n          currentUser={this.state.currentUser}\n          queryTranslateApi={this.queryTranslateApi}\n          sourceLang={this.state.currentUser.native_language}\n          desiredLang={this.state.currentUser.desired_language}\n\n        />\n\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default MainContent\n"]},"metadata":{},"sourceType":"module"}