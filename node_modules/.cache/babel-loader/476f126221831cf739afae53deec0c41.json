{"ast":null,"code":"import _slicedToArray from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/src/containers/MainContent.js\";\nimport React, { Component } from 'react';\nimport Header from '../components/Header';\nimport MessageContainer from '../containers/MessageContainer';\nimport FriendsList from '../containers/FriendsList';\n\nvar MainContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MainContent, _Component);\n\n  //does state need to live here as well??\n  function MainContent() {\n    var _this;\n\n    _classCallCheck(this, MainContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainContent).call(this));\n\n    _this.translationHandler = function () {\n      var url = \"https://translate.yandex.net/api/v1.5/tr.json/translate\";\n      var key = \"trnsl.1.1.20190412T160028Z.b3144093501b2817.c20a5121c33779f2470ca54177a5b3c3ccba3b3a\";\n      var text = \"sample text\";\n      var lang = \"en-sp\";\n      var format = \"plain\";\n      fetch(\"\".concat(url, \"/\").concat(key));\n    };\n\n    _this.friendClickHandler = function (userObj) {\n      console.log(userObj);\n      console.log(\"friendClickHandler invoked!\"); // debugger\n      // get master messages for reset\n\n      var masterMessages = _this.state.masterMessages; // update messages with mssgs from current user and clicked person\n\n      var currentUser = _this.state.currentUser.id;\n      var msgsCopy = _this.state.messages;\n      var recipient = userObj; // filter messages for sender receiver combo\n\n      var filteredMsgs = masterMessages.filter(function (msg) {\n        return msg.sender_id === currentUser && msg.receiver_id === recipient.id;\n      }); // debugger\n\n      _this.setState({\n        messages: filteredMsgs,\n        selectedUser: userObj\n      }); // return filteredMsgs\n\n    };\n\n    _this.deleteMessage = function (e) {\n      console.log(\"deleteMessage Invoked\", e);\n      debugger;\n    };\n\n    _this.messageHandler = function (e) {\n      console.log(e); // debugger\n\n      console.log(\"messageHandler invoked\");\n\n      _this.setState({\n        currentMessage: e.target.value\n      }); // way to access message text\n      // let message = event.target.parentElement.parentElement.children[0].value\n\n    };\n\n    _this.messageSender = function () {\n      console.log(\"messageSender Invoked!\"); // capture current message & sender from state\n\n      var recipient = _this.state.selectedUser.id;\n      var message = _this.state.currentMessage;\n      var sender = _this.state.currentUser.id;\n      var data = {\n        receiver_id: recipient,\n        seen: false,\n        sender_id: sender,\n        text_body: message\n      };\n      fetch('http://localhost:3000/users/1/messages', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (response) {\n        console.log('Success');\n\n        var copyOfMsgs = _toConsumableArray(_this.state.messages);\n\n        copyOfMsgs.push(response);\n\n        _this.setState({\n          messages: copyOfMsgs\n        });\n      }).catch(function (error) {\n        return console.error('Error', error);\n      }); // erase current message after sending\n\n      _this.setState({\n        currentMessage: \"\"\n      });\n    };\n\n    _this.state = {\n      currentUser: {},\n      masterMessages: [],\n      messages: [],\n      currentMessage: \"\",\n      selectedUser: {},\n      allUsers: [],\n      translationText: \"\",\n      currentConversation: {}\n    };\n    return _this;\n  }\n\n  _createClass(MainContent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // messages are statically fetched for skateboard\n      // fetch('http://localhost:3000/users/1/messages')\n      //   .then((resp)=>{\n      //     return resp.json()\n      //   })\n      //   .then((messages)=>{\n      //     console.log(messages);\n      //     this.setState({messages: messages})\n      //   })\n      // Promise.all allows multiple fetches to be done simultaneously, see below link\n      // https://medium.com/@ahnahn.un/a-brief-intro-to-promise-all-92291d93780c\n      Promise.all([fetch('http://localhost:3000/users/1'), fetch('http://localhost:3000/users/1/messages'), fetch('http://localhost:3000/users')]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            res1 = _ref2[0],\n            res2 = _ref2[1],\n            res3 = _ref2[2];\n\n        return Promise.all([res1.json(), res2.json(), res3.json()]);\n      }).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 3),\n            userInfo = _ref4[0],\n            messages = _ref4[1],\n            allUsers = _ref4[2];\n\n        console.log(userInfo);\n        console.log(messages);\n        console.log(allUsers);\n        return _this2.setState({\n          currentUser: userInfo,\n          messages: messages,\n          masterMessages: messages,\n          allUsers: allUsers\n        });\n      });\n    } //  ? key=<API key>\n    // & text=<text to translate>\n    // & lang=<translation direction>\n    // & [format=<text format>]\n    // & [options=<translation options>]\n    // & [callback=<name of the callback function>]\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"mainContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(Header, {\n        className: \"header\",\n        currentUser: this.state.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"subContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(FriendsList, {\n        allUsers: this.state.allUsers,\n        friendClickHandler: this.friendClickHandler,\n        currentUser: this.state.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(MessageContainer, {\n        selectedUser: this.state.selectedUser,\n        deleteMessage: this.deleteMessage,\n        messageHandler: this.messageHandler,\n        messages: this.state.messages,\n        filteredMsgs: null,\n        currentMessage: this.state.currentMessage,\n        messageSender: this.messageSender,\n        currentUser: this.state.currentUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MainContent;\n}(Component);\n\nexport default MainContent;","map":{"version":3,"sources":["/Users/benjaminaddai/dev/MOD5/project/chitChat/frontend/src/containers/MainContent.js"],"names":["React","Component","Header","MessageContainer","FriendsList","MainContent","translationHandler","url","key","text","lang","format","fetch","friendClickHandler","userObj","console","log","masterMessages","state","currentUser","id","msgsCopy","messages","recipient","filteredMsgs","filter","msg","sender_id","receiver_id","setState","selectedUser","deleteMessage","e","messageHandler","currentMessage","target","value","messageSender","message","sender","data","seen","text_body","method","body","JSON","stringify","headers","then","res","json","response","copyOfMsgs","push","catch","error","allUsers","translationText","currentConversation","Promise","all","res1","res2","res3","userInfo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../components/Header'\nimport MessageContainer from '../containers/MessageContainer'\nimport FriendsList from '../containers/FriendsList'\n\nclass MainContent extends Component {\n  //does state need to live here as well??\n  constructor(){\n    super()\n\n    this.state = {\n      currentUser: {},\n      masterMessages: [],\n      messages: [],\n      currentMessage: \"\",\n      selectedUser: {},\n      allUsers: [],\n      translationText: \"\",\n      currentConversation: {}\n    }\n  }\n\n  componentDidMount(){\n    // messages are statically fetched for skateboard\n\n    // fetch('http://localhost:3000/users/1/messages')\n    //   .then((resp)=>{\n    //     return resp.json()\n    //   })\n    //   .then((messages)=>{\n    //     console.log(messages);\n    //     this.setState({messages: messages})\n    //   })\n\n    // Promise.all allows multiple fetches to be done simultaneously, see below link\n    // https://medium.com/@ahnahn.un/a-brief-intro-to-promise-all-92291d93780c\n    Promise.all([\n      fetch('http://localhost:3000/users/1'),\n      fetch('http://localhost:3000/users/1/messages'),\n      fetch('http://localhost:3000/users')\n\n    ])\n    .then(([res1, res2, res3]) => Promise.all([res1.json(), res2.json(), res3.json()]))\n    .then(([userInfo, messages, allUsers])=>{\n      console.log(userInfo);\n      console.log(messages);\n      console.log(allUsers);\n\n      return this.setState({\n        currentUser: userInfo,\n        messages: messages,\n        masterMessages: messages,\n        allUsers: allUsers,\n      })\n    })\n  }\n\n\n\n //  ? key=<API key>\n // & text=<text to translate>\n // & lang=<translation direction>\n // & [format=<text format>]\n // & [options=<translation options>]\n // & [callback=<name of the callback function>]\n\n  translationHandler = ()=> {\n    const url = `https://translate.yandex.net/api/v1.5/tr.json/translate`\n    const key = `trnsl.1.1.20190412T160028Z.b3144093501b2817.c20a5121c33779f2470ca54177a5b3c3ccba3b3a`\n\n    let text = `sample text`\n    let lang = `en-sp`\n    let format = `plain`\n\n    fetch(`${url}/${key}`)\n  }\n\n  friendClickHandler = (userObj) =>{\n    console.log(userObj);\n    console.log(\"friendClickHandler invoked!\");\n\n    // debugger\n    // get master messages for reset\n    let masterMessages = this.state.masterMessages\n\n    // update messages with mssgs from current user and clicked person\n    let currentUser = this.state.currentUser.id\n    let msgsCopy = this.state.messages\n    let recipient = userObj\n\n    // filter messages for sender receiver combo\n\n    let filteredMsgs = masterMessages.filter((msg)=> {\n        return msg.sender_id === currentUser && msg.receiver_id === recipient.id\n    })\n\n    // debugger\n\n    this.setState({\n      messages: filteredMsgs,\n      selectedUser: userObj\n    })\n\n    // return filteredMsgs\n  }\n\n  deleteMessage = (e) => {\n    console.log(\"deleteMessage Invoked\", e);\n    debugger\n  }\n\n//handles the composition of a message\n  messageHandler = (e) => {\n    console.log(e);\n    // debugger\n    console.log(\"messageHandler invoked\");\n\n    this.setState({currentMessage: e.target.value})\n\n    // way to access message text\n    // let message = event.target.parentElement.parentElement.children[0].value\n  }\n\n//handles the sending of a message to a recipient\n  messageSender = () =>{\n    console.log(\"messageSender Invoked!\");\n\n    // capture current message & sender from state\n    let recipient = this.state.selectedUser.id\n    let message = this.state.currentMessage\n    let sender = this.state.currentUser.id\n    let data = {receiver_id: recipient, seen: false, sender_id: sender, text_body: message}\n\n    fetch('http://localhost:3000/users/1/messages', {\n      method:'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res=>res.json())\n    .then(response => {\n      console.log('Success')\n      let copyOfMsgs = [...this.state.messages]\n      copyOfMsgs.push(response)\n\n      this.setState({messages: copyOfMsgs})\n    })\n    .catch(error => console.error('Error', error));\n\n    // erase current message after sending\n    this.setState({currentMessage: \"\"})\n  }\n\n\n\n  render(){\n    return(\n      <div className=\"mainContent\" >\n        <Header className=\"header\"\n          currentUser={this.state.currentUser}\n        />\n      <div className=\"subContent\">\n        <FriendsList\n          allUsers={this.state.allUsers}\n          friendClickHandler={this.friendClickHandler}\n          currentUser={this.state.currentUser}\n        />\n        <MessageContainer\n          selectedUser={this.state.selectedUser}\n          deleteMessage={this.deleteMessage}\n          messageHandler={this.messageHandler}\n          messages={this.state.messages}\n          filteredMsgs={null}\n          currentMessage={this.state.currentMessage}\n          messageSender={this.messageSender}\n          currentUser={this.state.currentUser}\n\n        />\n\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default MainContent\n"]},"metadata":{},"sourceType":"module"}